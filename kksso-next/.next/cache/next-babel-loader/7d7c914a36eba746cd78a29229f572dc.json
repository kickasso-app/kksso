{"ast":null,"code":"import moment from \"moment\";\nconst today = moment();\nconst nextWeek = moment().add(7, \"days\");\nconst nextMonth = moment().add(1, \"months\");\nconst nextYear = moment().add(1, \"years\");\n\nconst filterStudios = ({\n  studios,\n  filters\n}) => {\n  let filtered = studios; // sessionStorage.setItem(\"filters\", JSON.stringify(filters));\n\n  if (filters.day !== false && filters.day !== \"All\") {\n    filtered = filtered.filter(studio => {\n      const datesArray = studio.dates.map(d => d.toDate());\n      const dates = datesArray.map(d => moment(d, \"DD/MM/YYYY hh:mm\"));\n      const isNextWeek = dates.some(d => d.isBetween(today, nextWeek));\n      const isNextMonth = dates.some(d => d.isBetween(today, nextMonth));\n      const isLater = dates.some(d => d.isBetween(nextMonth, nextYear));\n      let result = isNextWeek ? \"week \" : \"\";\n      result += isNextMonth ? \"month \" : \"\";\n      result += isLater ? \"later\" : \"\";\n      return result.includes(filters.day);\n    });\n  }\n\n  if (filters.cat !== false && filters.cat !== \"All\") {\n    filtered = filtered.filter(studio => {\n      const style = filters.cat.toLowerCase();\n      return studio.styles.includes(style);\n    });\n  }\n\n  if (filters.city !== false && filters.city !== \"All\") {\n    filtered = filtered.filter(studio => {\n      return studio.city.includes(filters.city);\n    });\n  }\n\n  return filtered;\n}; // load filters from sessionStorage\n// useEffect(() => {\n//     // if (studioIDRoute > 0 && studioIDRoute <= studios.length) {\n//     //   openstudio(studioIDRoute);\n//     // }\n//     // let savedfilters = sessionStorage.getItem(\"filters\");\n//     // if (savedfilters) {\n//     //   savedfilters = JSON.parse(savedfilters);\n//     //   setTheDay(savedfilters.day);\n//     //   setTheCat(savedfilters.cat);\n//     //   setTheCity(savedfilters.city);\n//     //   filterstudios(savedfilters);\n//     // } else {\n//     //   filterstudios({ day: theDay, cat: theCat, city: theCity });\n//     // }\n//     filterstudios({ day: theDay, cat: theCat, city: theCity });\n//     // eslint-disable-next-line react-hooks/exhaustive-deps\n//   }, [studios]);\n\n\nexport default filterStudios;","map":{"version":3,"sources":["/home/you/Code/github/kksso/kksso-next/components/StudiosFilter/filterStudios.js"],"names":["moment","today","nextWeek","add","nextMonth","nextYear","filterStudios","studios","filters","filtered","day","filter","studio","datesArray","dates","map","d","toDate","isNextWeek","some","isBetween","isNextMonth","isLater","result","includes","cat","style","toLowerCase","styles","city"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AAEA,MAAMC,KAAK,GAAGD,MAAM,EAApB;AACA,MAAME,QAAQ,GAAGF,MAAM,GAAGG,GAAT,CAAa,CAAb,EAAgB,MAAhB,CAAjB;AACA,MAAMC,SAAS,GAAGJ,MAAM,GAAGG,GAAT,CAAa,CAAb,EAAgB,QAAhB,CAAlB;AACA,MAAME,QAAQ,GAAGL,MAAM,GAAGG,GAAT,CAAa,CAAb,EAAgB,OAAhB,CAAjB;;AAEA,MAAMG,aAAa,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAD,KAA0B;AAC9C,MAAIC,QAAQ,GAAGF,OAAf,CAD8C,CAE9C;;AAEA,MAAIC,OAAO,CAACE,GAAR,KAAgB,KAAhB,IAAyBF,OAAO,CAACE,GAAR,KAAgB,KAA7C,EAAoD;AAClDD,IAAAA,QAAQ,GAAGA,QAAQ,CAACE,MAAT,CAAiBC,MAAD,IAAY;AACrC,YAAMC,UAAU,GAAGD,MAAM,CAACE,KAAP,CAAaC,GAAb,CAAkBC,CAAD,IAAOA,CAAC,CAACC,MAAF,EAAxB,CAAnB;AACA,YAAMH,KAAK,GAAGD,UAAU,CAACE,GAAX,CAAgBC,CAAD,IAAOhB,MAAM,CAACgB,CAAD,EAAI,kBAAJ,CAA5B,CAAd;AAEA,YAAME,UAAU,GAAGJ,KAAK,CAACK,IAAN,CAAYH,CAAD,IAAOA,CAAC,CAACI,SAAF,CAAYnB,KAAZ,EAAmBC,QAAnB,CAAlB,CAAnB;AACA,YAAMmB,WAAW,GAAGP,KAAK,CAACK,IAAN,CAAYH,CAAD,IAAOA,CAAC,CAACI,SAAF,CAAYnB,KAAZ,EAAmBG,SAAnB,CAAlB,CAApB;AACA,YAAMkB,OAAO,GAAGR,KAAK,CAACK,IAAN,CAAYH,CAAD,IAAOA,CAAC,CAACI,SAAF,CAAYhB,SAAZ,EAAuBC,QAAvB,CAAlB,CAAhB;AAEA,UAAIkB,MAAM,GAAGL,UAAU,GAAG,OAAH,GAAa,EAApC;AACAK,MAAAA,MAAM,IAAIF,WAAW,GAAG,QAAH,GAAc,EAAnC;AACAE,MAAAA,MAAM,IAAID,OAAO,GAAG,OAAH,GAAa,EAA9B;AAEA,aAAOC,MAAM,CAACC,QAAP,CAAgBhB,OAAO,CAACE,GAAxB,CAAP;AACD,KAbU,CAAX;AAcD;;AAED,MAAIF,OAAO,CAACiB,GAAR,KAAgB,KAAhB,IAAyBjB,OAAO,CAACiB,GAAR,KAAgB,KAA7C,EAAoD;AAClDhB,IAAAA,QAAQ,GAAGA,QAAQ,CAACE,MAAT,CAAiBC,MAAD,IAAY;AACrC,YAAMc,KAAK,GAAGlB,OAAO,CAACiB,GAAR,CAAYE,WAAZ,EAAd;AACA,aAAOf,MAAM,CAACgB,MAAP,CAAcJ,QAAd,CAAuBE,KAAvB,CAAP;AACD,KAHU,CAAX;AAID;;AAED,MAAIlB,OAAO,CAACqB,IAAR,KAAiB,KAAjB,IAA0BrB,OAAO,CAACqB,IAAR,KAAiB,KAA/C,EAAsD;AACpDpB,IAAAA,QAAQ,GAAGA,QAAQ,CAACE,MAAT,CAAiBC,MAAD,IAAY;AACrC,aAAOA,MAAM,CAACiB,IAAP,CAAYL,QAAZ,CAAqBhB,OAAO,CAACqB,IAA7B,CAAP;AACD,KAFU,CAAX;AAGD;;AAED,SAAOpB,QAAP;AACD,CAnCD,C,CAqCA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AAEA,eAAeH,aAAf","sourcesContent":["import moment from \"moment\";\n\nconst today = moment();\nconst nextWeek = moment().add(7, \"days\");\nconst nextMonth = moment().add(1, \"months\");\nconst nextYear = moment().add(1, \"years\");\n\nconst filterStudios = ({ studios, filters }) => {\n  let filtered = studios;\n  // sessionStorage.setItem(\"filters\", JSON.stringify(filters));\n\n  if (filters.day !== false && filters.day !== \"All\") {\n    filtered = filtered.filter((studio) => {\n      const datesArray = studio.dates.map((d) => d.toDate());\n      const dates = datesArray.map((d) => moment(d, \"DD/MM/YYYY hh:mm\"));\n\n      const isNextWeek = dates.some((d) => d.isBetween(today, nextWeek));\n      const isNextMonth = dates.some((d) => d.isBetween(today, nextMonth));\n      const isLater = dates.some((d) => d.isBetween(nextMonth, nextYear));\n\n      let result = isNextWeek ? \"week \" : \"\";\n      result += isNextMonth ? \"month \" : \"\";\n      result += isLater ? \"later\" : \"\";\n\n      return result.includes(filters.day);\n    });\n  }\n\n  if (filters.cat !== false && filters.cat !== \"All\") {\n    filtered = filtered.filter((studio) => {\n      const style = filters.cat.toLowerCase();\n      return studio.styles.includes(style);\n    });\n  }\n\n  if (filters.city !== false && filters.city !== \"All\") {\n    filtered = filtered.filter((studio) => {\n      return studio.city.includes(filters.city);\n    });\n  }\n\n  return filtered;\n};\n\n// load filters from sessionStorage\n// useEffect(() => {\n//     // if (studioIDRoute > 0 && studioIDRoute <= studios.length) {\n//     //   openstudio(studioIDRoute);\n//     // }\n\n//     // let savedfilters = sessionStorage.getItem(\"filters\");\n//     // if (savedfilters) {\n//     //   savedfilters = JSON.parse(savedfilters);\n//     //   setTheDay(savedfilters.day);\n//     //   setTheCat(savedfilters.cat);\n//     //   setTheCity(savedfilters.city);\n//     //   filterstudios(savedfilters);\n//     // } else {\n//     //   filterstudios({ day: theDay, cat: theCat, city: theCity });\n//     // }\n\n//     filterstudios({ day: theDay, cat: theCat, city: theCity });\n//     // eslint-disable-next-line react-hooks/exhaustive-deps\n//   }, [studios]);\n\nexport default filterStudios;\n"]},"metadata":{},"sourceType":"module"}