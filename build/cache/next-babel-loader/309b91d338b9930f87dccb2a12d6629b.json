{"ast":null,"code":"var _jsxFileName = \"/home/you/Code/github/kksso/components/forms/VisitForm/index.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\"; // import PropTypes from \"prop-types\";\n\nimport * as emailjs from \"emailjs-com\";\nimport moment from \"moment\";\nimport { CheckCircle, XCircle } from \"react-feather\";\nimport { Box, Form, FormField, MaskedInput, RadioButtonGroup, TextArea, TextInput, Text, Grommet } from \"grommet\";\nimport Button from \"./../../Button\";\nconst SERVICE_ID = process.env.NEXT_PUBLIC_EMAILJS_SERVICE_ID;\nconst TEMPLATE_ID = process.env.NEXT_PUBLIC_EMAILJS_TEMPLATE_ID;\nconst USER_ID = process.env.NEXT_PUBLIC_EMAILJS_USER_ID;\n\nconst VisitForm = ({\n  artistEmail,\n  artistName,\n  openVisitDates\n}) => {\n  const {\n    0: values,\n    1: setValues\n  } = useState({\n    to_email: artistEmail,\n    to_name: artistName,\n    requestor_email: \"kickasso@gmail.com\",\n    from_name: \"Requestor Name\",\n    message: \"Hello There Message\",\n    request_date: \"Tomorrow 2pm\"\n  });\n  const {\n    0: isEmailSent,\n    1: setIsEmailSent\n  } = useState(false);\n  const {\n    0: sendEmailError,\n    1: setSendEmailError\n  } = useState(false); // Remove in Production\n\n  const sendingRealEmail = false;\n  useEffect(() => {\n    emailjs.init(USER_ID);\n  }, []);\n\n  const handleSendEmail = () => {\n    var templateParams = values;\n    console.log(templateParams);\n\n    if (isEmailSent === false && sendingRealEmail) {\n      emailjs.send(SERVICE_ID, TEMPLATE_ID, templateParams, USER_ID).then(function (response) {\n        console.log(response.status, response.text);\n        setIsEmailSent(true);\n      }, function (err) {\n        console.log(err);\n        setSendEmailError(err);\n      });\n      setIsEmailSent(true);\n    } else {\n      // Remove in Production\n      console.log(\"Not sending for now, just testing!\");\n      setIsEmailSent(true);\n    }\n  };\n\n  return __jsx(Box, {\n    align: \"center\",\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, __jsx(Box, {\n    width: \"large\" // pad=\"medium\"\n    ,\n    margin: {\n      vertical: \"large\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, __jsx(Grommet, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, __jsx(Form, {\n    id: \"dddd\",\n    values: values,\n    onChange: nextValue => {\n      setValues(nextValue);\n    },\n    onReset: () => setValues({\n      to_email: artistEmail,\n      to_name: artistName,\n      requestor_email: \"Requestor email\",\n      from_name: \"Requestor Name\",\n      message: \"Hello There Message\",\n      request_date: \"\"\n    }),\n    onSubmit: handleSendEmail,\n    validate: \"blur\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }, __jsx(FormField, {\n    name: \"request_date\",\n    label: \"When to Visit?\",\n    required: true,\n    component: RadioButtonGroup,\n    options: openVisitDates.map(date => moment(date, \"DD/MM/YYYY hh:mm\").format(\"D MMM - h:mm a\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }), __jsx(FormField, {\n    name: \"from_name\",\n    htmlfor: \"text-input-id\",\n    label: \"Name\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }, __jsx(TextInput, {\n    id: \"text-input-id\",\n    name: \"from_name\",\n    placeholder: \"Your Name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 15\n    }\n  })), __jsx(FormField, {\n    label: \"Email\",\n    name: \"requestor_email\",\n    required: true,\n    validate: {\n      regexp: /\\S+@\\S+\\.\\S+/,\n      message: \"Enter a valid email address\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }, __jsx(MaskedInput, {\n    name: \"requestor_email\",\n    mask: [{\n      regexp: /^[\\w\\-_.]+$/,\n      placeholder: \"your\"\n    }, {\n      fixed: \"@\"\n    }, {\n      regexp: /^[\\w]+$/,\n      placeholder: \"email\"\n    }, {\n      fixed: \".\"\n    }, {\n      regexp: /^[\\w]+$/,\n      placeholder: \"com\"\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 15\n    }\n  })), __jsx(FormField, {\n    label: \"Message to artist\",\n    name: \"message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }\n  }, __jsx(TextArea, {\n    name: \"message\",\n    placeholder: \"Add a little something about you and why you want to visit the artist\\u2019s studio and what you like about their work. (optional)\",\n    fill: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 15\n    }\n  })), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }), __jsx(Box, {\n    direction: \"row\",\n    gap: \"medium\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    type: \"submit\",\n    btnStyle: \"filled\",\n    disabled: isEmailSent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 15\n    }\n  }, \"Request A Visit\"), __jsx(Button, {\n    type: \"reset\",\n    btnStyle: \"outline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 15\n    }\n  }, \"Clear\")), isEmailSent ? __jsx(React.Fragment, null, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 17\n    }\n  }, __jsx(CheckCircle, {\n    size: 24,\n    color: \"#C0FFF4\",\n    strokeWidth: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 19\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 19\n    }\n  }), \"We just sent your request to the artist!\", __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 19\n    }\n  }), \" Please wait to hear back from them to confirm the visit details.\")) : sendEmailError && __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 17\n    }\n  }, __jsx(XCircle, {\n    size: 24,\n    color: \"#FFC0CB\",\n    strokeWidth: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 19\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 19\n    }\n  }), \"We couldn't send your request this time.\", __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 19\n    }\n  }), \"Please try again.\")))));\n};\n\nexport default VisitForm;","map":{"version":3,"sources":["/home/you/Code/github/kksso/components/forms/VisitForm/index.js"],"names":["React","useState","useEffect","emailjs","moment","CheckCircle","XCircle","Box","Form","FormField","MaskedInput","RadioButtonGroup","TextArea","TextInput","Text","Grommet","Button","SERVICE_ID","process","env","NEXT_PUBLIC_EMAILJS_SERVICE_ID","TEMPLATE_ID","NEXT_PUBLIC_EMAILJS_TEMPLATE_ID","USER_ID","NEXT_PUBLIC_EMAILJS_USER_ID","VisitForm","artistEmail","artistName","openVisitDates","values","setValues","to_email","to_name","requestor_email","from_name","message","request_date","isEmailSent","setIsEmailSent","sendEmailError","setSendEmailError","sendingRealEmail","init","handleSendEmail","templateParams","console","log","send","then","response","status","text","err","vertical","nextValue","map","date","format","regexp","placeholder","fixed"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n// import PropTypes from \"prop-types\";\n\nimport * as emailjs from \"emailjs-com\";\n\nimport moment from \"moment\";\n\nimport { CheckCircle, XCircle } from \"react-feather\";\n\nimport {\n  Box,\n  Form,\n  FormField,\n  MaskedInput,\n  RadioButtonGroup,\n  TextArea,\n  TextInput,\n  Text,\n  Grommet,\n} from \"grommet\";\n\nimport Button from \"./../../Button\";\n\nconst SERVICE_ID = process.env.NEXT_PUBLIC_EMAILJS_SERVICE_ID;\nconst TEMPLATE_ID = process.env.NEXT_PUBLIC_EMAILJS_TEMPLATE_ID;\nconst USER_ID = process.env.NEXT_PUBLIC_EMAILJS_USER_ID;\n\nconst VisitForm = ({ artistEmail, artistName, openVisitDates }) => {\n  const [values, setValues] = useState({\n    to_email: artistEmail,\n    to_name: artistName,\n    requestor_email: \"kickasso@gmail.com\",\n    from_name: \"Requestor Name\",\n    message: \"Hello There Message\",\n    request_date: \"Tomorrow 2pm\",\n  });\n  const [isEmailSent, setIsEmailSent] = useState(false);\n  const [sendEmailError, setSendEmailError] = useState(false);\n  // Remove in Production\n  const sendingRealEmail = false;\n\n  useEffect(() => {\n    emailjs.init(USER_ID);\n  }, []);\n\n  const handleSendEmail = () => {\n    var templateParams = values;\n    console.log(templateParams);\n\n    if (isEmailSent === false && sendingRealEmail) {\n      emailjs.send(SERVICE_ID, TEMPLATE_ID, templateParams, USER_ID).then(\n        function (response) {\n          console.log(response.status, response.text);\n          setIsEmailSent(true);\n        },\n        function (err) {\n          console.log(err);\n          setSendEmailError(err);\n        }\n      );\n      setIsEmailSent(true);\n    } else {\n      // Remove in Production\n      console.log(\"Not sending for now, just testing!\");\n      setIsEmailSent(true);\n    }\n  };\n\n  return (\n    <Box align=\"center\" justify=\"center\">\n      <Box\n        width=\"large\"\n        // pad=\"medium\"\n        margin={{ vertical: \"large\" }}\n      >\n        <Grommet>\n          <Form\n            id=\"dddd\"\n            values={values}\n            onChange={(nextValue) => {\n              setValues(nextValue);\n            }}\n            onReset={() =>\n              setValues({\n                to_email: artistEmail,\n                to_name: artistName,\n                requestor_email: \"Requestor email\",\n                from_name: \"Requestor Name\",\n                message: \"Hello There Message\",\n                request_date: \"\",\n              })\n            }\n            onSubmit={handleSendEmail}\n            validate=\"blur\"\n          >\n            <FormField\n              name=\"request_date\"\n              label=\"When to Visit?\"\n              required\n              component={RadioButtonGroup}\n              options={openVisitDates.map((date) =>\n                moment(date, \"DD/MM/YYYY hh:mm\").format(\"D MMM - h:mm a\")\n              )}\n            />\n\n            <FormField\n              name=\"from_name\"\n              htmlfor=\"text-input-id\"\n              label=\"Name\"\n              required\n            >\n              <TextInput\n                id=\"text-input-id\"\n                name=\"from_name\"\n                placeholder=\"Your Name\"\n              />\n            </FormField>\n            <FormField\n              label=\"Email\"\n              name=\"requestor_email\"\n              required\n              validate={{\n                regexp: /\\S+@\\S+\\.\\S+/,\n                message: \"Enter a valid email address\",\n              }}\n            >\n              <MaskedInput\n                name=\"requestor_email\"\n                mask={[\n                  { regexp: /^[\\w\\-_.]+$/, placeholder: \"your\" },\n                  { fixed: \"@\" },\n                  { regexp: /^[\\w]+$/, placeholder: \"email\" },\n                  { fixed: \".\" },\n                  { regexp: /^[\\w]+$/, placeholder: \"com\" },\n                ]}\n              />\n            </FormField>\n            <FormField label=\"Message to artist\" name=\"message\">\n              <TextArea\n                name=\"message\"\n                placeholder=\"Add a little something about you and why you want to visit the artist’s studio and what you like about their work. (optional)\"\n                fill\n              />\n            </FormField>\n            <br />\n            <Box direction=\"row\" gap=\"medium\">\n              <Button type=\"submit\" btnStyle=\"filled\" disabled={isEmailSent}>\n                Request A Visit\n              </Button>\n              <Button type=\"reset\" btnStyle=\"outline\">\n                Clear\n              </Button>\n            </Box>\n\n            {isEmailSent ? (\n              <>\n                <Text>\n                  <CheckCircle size={24} color=\"#C0FFF4\" strokeWidth={3} />\n                  <br />\n                  We just sent your request to the artist!\n                  <br /> Please wait to hear back from them to confirm the visit\n                  details.\n                </Text>\n              </>\n            ) : (\n              sendEmailError && (\n                <Text>\n                  <XCircle size={24} color=\"#FFC0CB\" strokeWidth={3} />\n                  <br />\n                  We couldn't send your request this time.\n                  <br />\n                  Please try again.\n                </Text>\n              )\n            )}\n          </Form>\n        </Grommet>\n      </Box>\n    </Box>\n  );\n};\n\nexport default VisitForm;\n"]},"metadata":{},"sourceType":"module"}