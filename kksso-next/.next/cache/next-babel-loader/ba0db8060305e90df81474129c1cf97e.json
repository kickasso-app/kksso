{"ast":null,"code":"var _jsxFileName = \"/home/you/Code/github/kksso/kksso-next/pages/studio/[id].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useContext, useState, useEffect } from \"react\";\nimport \"firebase/firestore\";\nimport \"firebase/functions\";\nimport PropTypes from \"prop-types\";\nimport { useRouter } from \"next/router\";\nimport Link from \"next/link\";\nimport { useDocument, useCollection } from \"react-firebase-hooks/firestore\";\nimport { FirebaseContext } from \"../../services/firebase.js\"; // import ReactMarkdown from \"react-markdown\";\n\nimport { Grid, Row, Col } from \"react-flexbox-grid/dist/react-flexbox-grid\";\nimport { ChevronLeft, Disc } from \"react-feather\"; // import EmailForm from \"Components/EmailForm\";\n// // import ImagesCarousel from \"Components/ImagesCarousel\";\n\nimport \"./index.module.scss\";\n\nconst Studio = () => {\n  const router = useRouter();\n  const {\n    id\n  } = router.query;\n  const firebase = useContext(FirebaseContext);\n  const [value, loading, error] = useCollection(firebase.firestore().collection(\"studios\"), {\n    snapshotListenOptions: {\n      includeMetadataChanges: true\n    }\n  }); //   const sayHello = firebase.functions().httpsCallable(\"sayHelloFunc\");\n  //   const getProducts = firebase.functions().httpsCallable(\"getProductsCF\");\n\n  const {\n    0: studioData,\n    1: setStudioData\n  } = useState({});\n  useEffect(() => {\n    if (value) {\n      console.log(id);\n      const data = value.docs.map(doc => doc.data());\n      console.log(data);\n      const theStudioData = data.filter(studio => studio.id == id);\n      setStudioData(theStudioData[0]);\n      console.log(studioData);\n    } // sayHello({ name: \"Shaun\" }).then((result) => {\n    //   console.log(result.data);\n    // });\n    // getProducts({}).then((result) => {\n    //   console.log(result.data);\n    //   setResultfromCF(result.data);\n    // });\n\n  }, [value]);\n  const paragraphSeperator = \"\\\\\";\n\n  const makeParagraphs = (paragraphString, pSeparator) => {\n    return paragraphString.split(pSeparator).map((paragraph, index) => __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }\n    }, paragraph) // <ReactMarkdown key={index}>{paragraph}</ReactMarkdown>\n    );\n  }; // const makeImagesArray = () => {\n  //   const imgUrls =\n  //     images !== undefined &&\n  //     images.split(\",\").map((imgId) => \"/img/\" + artist + \"/\" + imgId + \".jpg\");\n  //   const imgTexts = imagesText !== undefined && imagesText.split(\";\");\n  //   const imgs = imgUrls.reduce((acc, current, index) => {\n  //     acc.push({ url: imgUrls[index], caption: imgTexts[index] || \"\" });\n  //     return acc;\n  //   }, []);\n  //   return imgs;\n  // };\n\n\n  return __jsx(Grid, {\n    fluid: true,\n    className: \"article-open\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }\n  }, __jsx(Col, {\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }, __jsx(Link, {\n    className: \"pinklink\",\n    href: \"/studios\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, \"BACK\"), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }), __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, __jsx(Col, {\n    xs: 12,\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }, __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }), __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }, studioData.artist), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }), __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }, \"Mediums\"), __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  }, \"Studio\"), __jsx(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }, __jsx(Disc, {\n    size: 18,\n    strokeWidth: \"2\",\n    color: \"#7fffd4\",\n    fill: \"#fff\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 15\n    }\n  }), \" \")), __jsx(Col, {\n    xs: 12,\n    md: 5,\n    mdOffset: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }))));\n};\n\nStudio.propTypes = {//   article: PropTypes.shape({\n  //     id: PropTypes.string.isRequired,\n  //     dates: PropTypes.string.isRequired,\n  //     styles: PropTypes.string.isRequired,\n  //     city: PropTypes.string.isRequired,\n  //     rules: PropTypes.string.isRequired,\n  //     artistText: PropTypes.string.isRequired,\n  //     studioText: PropTypes.string.isRequired,\n  //   }).isRequired,\n  //   closeArticle: PropTypes.func.isRequired,\n}; // export const getServerSideProps = async ({ query }) => {\n//   const content = {}\n//   const [value, loading, error] = useDocument(\n//     firebase.firestore().doc('hooks/nBShXiRGFAhuiPfBaGpt'),\n//     {\n//       snapshotListenOptions: { includeMetadataChanges: true },\n//     }\n//   );\n//   await fire.firestore()\n//     .collection('blog')\n//     .doc(query.id)\n//     .get()\n//     .then(result => {\n//       content['title'] = result.data().title;\n//       content['content'] = result.data().content;\n//     });\n// return {\n//     props: {\n//       title: content.title,\n//       content: content.content,\n//     }\n//   }\n// }\n\nexport default Studio;","map":{"version":3,"sources":["/home/you/Code/github/kksso/kksso-next/pages/studio/[id].js"],"names":["useContext","useState","useEffect","PropTypes","useRouter","Link","useDocument","useCollection","FirebaseContext","Grid","Row","Col","ChevronLeft","Disc","Studio","router","id","query","firebase","value","loading","error","firestore","collection","snapshotListenOptions","includeMetadataChanges","studioData","setStudioData","console","log","data","docs","map","doc","theStudioData","filter","studio","paragraphSeperator","makeParagraphs","paragraphString","pSeparator","split","paragraph","index","artist","propTypes"],"mappings":"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","sourcesContent":["import { useContext, useState, useEffect } from \"react\";\nimport \"firebase/firestore\";\nimport \"firebase/functions\";\nimport PropTypes from \"prop-types\";\n\nimport { useRouter } from \"next/router\";\nimport Link from \"next/link\";\nimport { useDocument, useCollection } from \"react-firebase-hooks/firestore\";\nimport { FirebaseContext } from \"../../services/firebase.js\";\n\n// import ReactMarkdown from \"react-markdown\";\n\nimport { Grid, Row, Col } from \"react-flexbox-grid/dist/react-flexbox-grid\";\n\nimport { ChevronLeft, Disc } from \"react-feather\";\n\n// import EmailForm from \"Components/EmailForm\";\n// // import ImagesCarousel from \"Components/ImagesCarousel\";\nimport \"./index.module.scss\";\n\nconst Studio = () => {\n  const router = useRouter();\n  const { id } = router.query;\n\n  const firebase = useContext(FirebaseContext);\n\n  const [value, loading, error] = useCollection(\n    firebase.firestore().collection(\"studios\"),\n    {\n      snapshotListenOptions: { includeMetadataChanges: true },\n    }\n  );\n  //   const sayHello = firebase.functions().httpsCallable(\"sayHelloFunc\");\n  //   const getProducts = firebase.functions().httpsCallable(\"getProductsCF\");\n\n  const [studioData, setStudioData] = useState({});\n\n  useEffect(() => {\n    if (value) {\n      console.log(id);\n      const data = value.docs.map((doc) => doc.data());\n      console.log(data);\n      const theStudioData = data.filter((studio) => studio.id == id);\n      setStudioData(theStudioData[0]);\n      console.log(studioData);\n    }\n    // sayHello({ name: \"Shaun\" }).then((result) => {\n    //   console.log(result.data);\n    // });\n    // getProducts({}).then((result) => {\n    //   console.log(result.data);\n    //   setResultfromCF(result.data);\n    // });\n  }, [value]);\n\n  const paragraphSeperator = \"\\\\\";\n\n  const makeParagraphs = (paragraphString, pSeparator) => {\n    return paragraphString.split(pSeparator).map((paragraph, index) => (\n      <p>{paragraph}</p>\n      // <ReactMarkdown key={index}>{paragraph}</ReactMarkdown>\n    ));\n  };\n\n  // const makeImagesArray = () => {\n  //   const imgUrls =\n  //     images !== undefined &&\n  //     images.split(\",\").map((imgId) => \"/img/\" + artist + \"/\" + imgId + \".jpg\");\n\n  //   const imgTexts = imagesText !== undefined && imagesText.split(\";\");\n\n  //   const imgs = imgUrls.reduce((acc, current, index) => {\n  //     acc.push({ url: imgUrls[index], caption: imgTexts[index] || \"\" });\n  //     return acc;\n  //   }, []);\n\n  //   return imgs;\n  // };\n\n  return (\n    <Grid fluid className=\"article-open\">\n      <Col xs={12}>\n        <Link className=\"pinklink\" href=\"/studios\">\n          BACK\n          {/* <ChevronLeft size={14} />  */}\n        </Link>\n        <br />\n\n        {/* <ImagesCarousel images={makeImagesArray()} /> */}\n\n        <Row>\n          <Col xs={12} md={6}>\n            <br />\n\n            <h2>{studioData.artist}</h2>\n\n            <br />\n            {/* {makeParagraphs(artistText, paragraphSeperator)} */}\n\n            <h3>Mediums</h3>\n            {/* <p>{styles}</p> */}\n\n            <h3>Studio</h3>\n\n            <h4>\n              <Disc size={18} strokeWidth=\"2\" color=\"#7fffd4\" fill=\"#fff\" />{\" \"}\n              {/* {city} */}\n            </h4>\n\n            {/* {makeParagraphs(studioText, paragraphSeperator)} */}\n          </Col>\n          <Col xs={12} md={5} mdOffset={1}>\n            {/* <Row> \n          {dates && (\n            <>\n              {rules.length > 0 && (\n                <>\n                  <h3>{artist.split(\" \")[0]}'s Visit Rules</h3>\n                  <br />\n                  <ul>\n                    {rules.split(\";\").map((rule, index) => (\n                      <li key={index}>{rule}</li>\n                    ))}\n                  </ul>\n                </>\n              )}\n              <h3>General Visit Tips</h3>\n              <ul>\n                <li>Show up on time</li>\n                <li>Ask before taking photos of the artist and artworks</li>\n                <li>A gift is almost always a nice touch</li>\n              </ul>\n               <EmailForm\n                openVisitDates={dates.split(\",\")}\n                artistEmail={email}\n                artistName={artist}\n              /> \n            </>\n          )}\n        </Row> */}\n          </Col>\n        </Row>\n      </Col>\n    </Grid>\n  );\n};\nStudio.propTypes = {\n  //   article: PropTypes.shape({\n  //     id: PropTypes.string.isRequired,\n  //     dates: PropTypes.string.isRequired,\n  //     styles: PropTypes.string.isRequired,\n  //     city: PropTypes.string.isRequired,\n  //     rules: PropTypes.string.isRequired,\n  //     artistText: PropTypes.string.isRequired,\n  //     studioText: PropTypes.string.isRequired,\n  //   }).isRequired,\n  //   closeArticle: PropTypes.func.isRequired,\n};\n\n// export const getServerSideProps = async ({ query }) => {\n//   const content = {}\n\n//   const [value, loading, error] = useDocument(\n//     firebase.firestore().doc('hooks/nBShXiRGFAhuiPfBaGpt'),\n//     {\n//       snapshotListenOptions: { includeMetadataChanges: true },\n//     }\n//   );\n\n//   await fire.firestore()\n//     .collection('blog')\n//     .doc(query.id)\n//     .get()\n//     .then(result => {\n//       content['title'] = result.data().title;\n//       content['content'] = result.data().content;\n//     });\n// return {\n//     props: {\n//       title: content.title,\n//       content: content.content,\n//     }\n//   }\n// }\n\nexport default Studio;\n"]},"metadata":{},"sourceType":"module"}