{"ast":null,"code":"import _regeneratorRuntime from \"/home/you/Code/github/kksso/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/you/Code/github/kksso/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/home/you/Code/github/kksso/services/studios.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { createContext, useState } from \"react\";\nimport { supabase } from \"./supabase\";\nvar StudiosContext = /*#__PURE__*/createContext(null);\nvar emptyQuery = {\n  city: \"\",\n  mediums: \"\"\n};\n\nvar StudiosProvider = function StudiosProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState([]),\n      studios = _useState[0],\n      setStudios = _useState[1];\n\n  var _useState2 = useState(true),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(),\n      error = _useState3[0],\n      setError = _useState3[1];\n\n  var _useState4 = useState(emptyQuery),\n      query = _useState4[0],\n      setQuery = _useState4[1];\n\n  var updateStudios = function updateStudios(newStudios) {\n    setStudios(newStudios);\n  };\n\n  var updateQuery = function updateQuery(newQuery) {\n    setQuery(newQuery);\n  };\n\n  var fetchStudios = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _yield$supabase$from$, supaStudios, error;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return supabase.from(\"studios\").select(\"*\").order(\"id\", true);\n\n            case 2:\n              _yield$supabase$from$ = _context.sent;\n              supaStudios = _yield$supabase$from$.data;\n              error = _yield$supabase$from$.error;\n              if (error) setError(error);else {\n                setStudios(supaStudios); // console.log(supaStudios);\n\n                setLoading(false);\n              }\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function fetchStudios() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  /* {\n  const fetchStudio = async () => {\n    // TO DO: grab from local store\n    let { data: oneStudio, error } = await supabase\n      .from(\"studios\")\n      .select(\"*\")\n      .match({ id })\n      .single();\n    if (error) setError(error);\n    else {\n      setStudio(oneStudio);\n      setImages(\n        prepImagesforCarousel(oneStudio.imagesFiles, oneStudio.imagesCaptions)\n      );\n      setLoading(false);\n    }\n  };\n  } */\n\n\n  var contextObj = {\n    studios: studios,\n    query: query,\n    updateStudios: updateStudios,\n    updateQuery: updateQuery,\n    fetchStudios: fetchStudios,\n    loading: loading,\n    error: error\n  };\n  return __jsx(StudiosContext.Provider, {\n    value: contextObj,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, children);\n};\n\n_s(StudiosProvider, \"nwDRHwMffYz45amV+juq+wtu5Z4=\");\n\n_c = StudiosProvider;\nexport { StudiosContext, StudiosProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"StudiosProvider\");","map":{"version":3,"sources":["/home/you/Code/github/kksso/services/studios.js"],"names":["createContext","useState","supabase","StudiosContext","emptyQuery","city","mediums","StudiosProvider","children","studios","setStudios","loading","setLoading","error","setError","query","setQuery","updateStudios","newStudios","updateQuery","newQuery","fetchStudios","from","select","order","supaStudios","data","contextObj"],"mappings":";;;;;;;;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,SAASC,QAAT,QAAyB,YAAzB;AAEA,IAAMC,cAAc,gBAAGH,aAAa,CAAC,IAAD,CAApC;AAEA,IAAMI,UAAU,GAAG;AAAEC,EAAAA,IAAI,EAAE,EAAR;AAAYC,EAAAA,OAAO,EAAE;AAArB,CAAnB;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,OAAkB;AAAA;;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAAA,kBACVP,QAAQ,CAAC,EAAD,CADE;AAAA,MACjCQ,OADiC;AAAA,MACxBC,UADwB;;AAAA,mBAEVT,QAAQ,CAAC,IAAD,CAFE;AAAA,MAEjCU,OAFiC;AAAA,MAExBC,UAFwB;;AAAA,mBAGdX,QAAQ,EAHM;AAAA,MAGjCY,KAHiC;AAAA,MAG1BC,QAH0B;;AAAA,mBAIdb,QAAQ,CAACG,UAAD,CAJM;AAAA,MAIjCW,KAJiC;AAAA,MAI1BC,QAJ0B;;AAMxC,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,UAAD,EAAgB;AACpCR,IAAAA,UAAU,CAACQ,UAAD,CAAV;AACD,GAFD;;AAIA,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,QAAD,EAAc;AAChCJ,IAAAA,QAAQ,CAACI,QAAD,CAAR;AACD,GAFD;;AAIA,MAAMC,YAAY;AAAA,yEAAG;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACsBnB,QAAQ,CAC9CoB,IADsC,CACjC,SADiC,EAEtCC,MAFsC,CAE/B,GAF+B,EAGtCC,KAHsC,CAGhC,IAHgC,EAG1B,IAH0B,CADtB;;AAAA;AAAA;AACPC,cAAAA,WADO,yBACbC,IADa;AACMb,cAAAA,KADN,yBACMA,KADN;AAKnB,kBAAIA,KAAJ,EAAWC,QAAQ,CAACD,KAAD,CAAR,CAAX,KACK;AACHH,gBAAAA,UAAU,CAACe,WAAD,CAAV,CADG,CAEH;;AACAb,gBAAAA,UAAU,CAAC,KAAD,CAAV;AACD;;AAVkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAZS,YAAY;AAAA;AAAA;AAAA,KAAlB;AAaA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEE,MAAMM,UAAU,GAAG;AACjBlB,IAAAA,OAAO,EAAPA,OADiB;AAEjBM,IAAAA,KAAK,EAALA,KAFiB;AAGjBE,IAAAA,aAAa,EAAbA,aAHiB;AAIjBE,IAAAA,WAAW,EAAXA,WAJiB;AAKjBE,IAAAA,YAAY,EAAZA,YALiB;AAMjBV,IAAAA,OAAO,EAAPA,OANiB;AAOjBE,IAAAA,KAAK,EAALA;AAPiB,GAAnB;AAUA,SACE,MAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAEc,UAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGnB,QADH,CADF;AAKD,CA7DD;;GAAMD,e;;KAAAA,e;AA+DN,SAASJ,cAAT,EAAyBI,eAAzB","sourcesContent":["import { createContext, useState } from \"react\";\nimport { supabase } from \"./supabase\";\n\nconst StudiosContext = createContext(null);\n\nconst emptyQuery = { city: \"\", mediums: \"\" };\n\nconst StudiosProvider = ({ children }) => {\n  const [studios, setStudios] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState();\n  const [query, setQuery] = useState(emptyQuery);\n\n  const updateStudios = (newStudios) => {\n    setStudios(newStudios);\n  };\n\n  const updateQuery = (newQuery) => {\n    setQuery(newQuery);\n  };\n\n  const fetchStudios = async () => {\n    let { data: supaStudios, error } = await supabase\n      .from(\"studios\")\n      .select(\"*\")\n      .order(\"id\", true);\n    if (error) setError(error);\n    else {\n      setStudios(supaStudios);\n      // console.log(supaStudios);\n      setLoading(false);\n    }\n  };\n\n  /* {\n  const fetchStudio = async () => {\n    // TO DO: grab from local store\n    let { data: oneStudio, error } = await supabase\n      .from(\"studios\")\n      .select(\"*\")\n      .match({ id })\n      .single();\n    if (error) setError(error);\n    else {\n      setStudio(oneStudio);\n      setImages(\n        prepImagesforCarousel(oneStudio.imagesFiles, oneStudio.imagesCaptions)\n      );\n      setLoading(false);\n    }\n  };\n  } */\n\n  const contextObj = {\n    studios,\n    query,\n    updateStudios,\n    updateQuery,\n    fetchStudios,\n    loading,\n    error,\n  };\n\n  return (\n    <StudiosContext.Provider value={contextObj}>\n      {children}\n    </StudiosContext.Provider>\n  );\n};\n\nexport { StudiosContext, StudiosProvider };\n"]},"metadata":{},"sourceType":"module"}