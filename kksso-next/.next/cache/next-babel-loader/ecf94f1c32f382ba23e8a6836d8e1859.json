{"ast":null,"code":"var _jsxFileName = \"/home/you/Code/github/kksso/kksso-next/pages/studio/[id].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useContext, useState, useEffect } from \"react\";\nimport \"firebase/firestore\";\nimport \"firebase/functions\";\nimport PropTypes from \"prop-types\";\nimport { useRouter } from \"next/router\";\nimport Link from \"next/link\";\nimport { useDocument, useCollection } from \"react-firebase-hooks/firestore\";\nimport { FirebaseContext } from \"../../services/firebase.js\"; // import ReactMarkdown from \"react-markdown\";\n\nimport { Grid, Row, Col } from \"react-flexbox-grid/dist/react-flexbox-grid\";\nimport { ChevronLeft, Disc } from \"react-feather\"; // import EmailForm from \"Components/EmailForm\";\n// // import ImagesCarousel from \"Components/ImagesCarousel\";\n\nimport \"./index.module.scss\";\n\nconst Studio = () => {\n  const router = useRouter();\n  const {\n    id\n  } = router.query;\n  const firebase = useContext(FirebaseContext);\n  const [value, loading, error] = useCollection(firebase.firestore().collection(\"studios\"), {\n    snapshotListenOptions: {\n      includeMetadataChanges: true\n    }\n  }); //   const sayHello = firebase.functions().httpsCallable(\"sayHelloFunc\");\n  //   const getProducts = firebase.functions().httpsCallable(\"getProductsCF\");\n\n  const {\n    0: studioData,\n    1: setStudioData\n  } = useState({});\n  useEffect(() => {\n    if (value) {\n      console.log(pid);\n      const data = value.docs.map(doc => doc.data());\n      console.log(data);\n      const theStudioData = data.filter(studio => studio.id == pid);\n      setStudioData(theStudioData);\n      console.log(theStudioData);\n    } // sayHello({ name: \"Shaun\" }).then((result) => {\n    //   console.log(result.data);\n    // });\n    // getProducts({}).then((result) => {\n    //   console.log(result.data);\n    //   setResultfromCF(result.data);\n    // });\n\n  }, [value]);\n  const paragraphSeperator = \"\\\\\";\n\n  const makeParagraphs = (paragraphString, pSeparator) => {\n    return paragraphString.split(pSeparator).map((paragraph, index) => __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }\n    }, paragraph) // <ReactMarkdown key={index}>{paragraph}</ReactMarkdown>\n    );\n  }; // const makeImagesArray = () => {\n  //   const imgUrls =\n  //     images !== undefined &&\n  //     images.split(\",\").map((imgId) => \"/img/\" + artist + \"/\" + imgId + \".jpg\");\n  //   const imgTexts = imagesText !== undefined && imagesText.split(\";\");\n  //   const imgs = imgUrls.reduce((acc, current, index) => {\n  //     acc.push({ url: imgUrls[index], caption: imgTexts[index] || \"\" });\n  //     return acc;\n  //   }, []);\n  //   return imgs;\n  // };\n\n\n  return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 10\n    }\n  }, JSON.stringify(studioData), \",\");\n};\n\nStudio.propTypes = {//   article: PropTypes.shape({\n  //     id: PropTypes.string.isRequired,\n  //     dates: PropTypes.string.isRequired,\n  //     styles: PropTypes.string.isRequired,\n  //     city: PropTypes.string.isRequired,\n  //     rules: PropTypes.string.isRequired,\n  //     artistText: PropTypes.string.isRequired,\n  //     studioText: PropTypes.string.isRequired,\n  //   }).isRequired,\n  //   closeArticle: PropTypes.func.isRequired,\n}; // export const getServerSideProps = async ({ query }) => {\n//   const content = {}\n//   const [value, loading, error] = useDocument(\n//     firebase.firestore().doc('hooks/nBShXiRGFAhuiPfBaGpt'),\n//     {\n//       snapshotListenOptions: { includeMetadataChanges: true },\n//     }\n//   );\n//   await fire.firestore()\n//     .collection('blog')\n//     .doc(query.id)\n//     .get()\n//     .then(result => {\n//       content['title'] = result.data().title;\n//       content['content'] = result.data().content;\n//     });\n// return {\n//     props: {\n//       title: content.title,\n//       content: content.content,\n//     }\n//   }\n// }\n\nexport default Studio;","map":{"version":3,"sources":["/home/you/Code/github/kksso/kksso-next/pages/studio/[id].js"],"names":["useContext","useState","useEffect","PropTypes","useRouter","Link","useDocument","useCollection","FirebaseContext","Grid","Row","Col","ChevronLeft","Disc","Studio","router","id","query","firebase","value","loading","error","firestore","collection","snapshotListenOptions","includeMetadataChanges","studioData","setStudioData","console","log","pid","data","docs","map","doc","theStudioData","filter","studio","paragraphSeperator","makeParagraphs","paragraphString","pSeparator","split","paragraph","index","JSON","stringify","propTypes"],"mappings":";;;AAAA,SAASA,UAAT,EAAqBC,QAArB,EAA+BC,SAA/B,QAAgD,OAAhD;AACA,OAAO,oBAAP;AACA,OAAO,oBAAP;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,WAAT,EAAsBC,aAAtB,QAA2C,gCAA3C;AACA,SAASC,eAAT,QAAgC,4BAAhC,C,CAEA;;AAEA,SAASC,IAAT,EAAeC,GAAf,EAAoBC,GAApB,QAA+B,4CAA/B;AAEA,SAASC,WAAT,EAAsBC,IAAtB,QAAkC,eAAlC,C,CAEA;AACA;;AACA,OAAO,qBAAP;;AAEA,MAAMC,MAAM,GAAG,MAAM;AACnB,QAAMC,MAAM,GAAGX,SAAS,EAAxB;AACA,QAAM;AAAEY,IAAAA;AAAF,MAASD,MAAM,CAACE,KAAtB;AAEA,QAAMC,QAAQ,GAAGlB,UAAU,CAACQ,eAAD,CAA3B;AAEA,QAAM,CAACW,KAAD,EAAQC,OAAR,EAAiBC,KAAjB,IAA0Bd,aAAa,CAC3CW,QAAQ,CAACI,SAAT,GAAqBC,UAArB,CAAgC,SAAhC,CAD2C,EAE3C;AACEC,IAAAA,qBAAqB,EAAE;AAAEC,MAAAA,sBAAsB,EAAE;AAA1B;AADzB,GAF2C,CAA7C,CANmB,CAYnB;AACA;;AAEA,QAAM;AAAA,OAACC,UAAD;AAAA,OAAaC;AAAb,MAA8B1B,QAAQ,CAAC,EAAD,CAA5C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIiB,KAAJ,EAAW;AACTS,MAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AACA,YAAMC,IAAI,GAAGZ,KAAK,CAACa,IAAN,CAAWC,GAAX,CAAgBC,GAAD,IAASA,GAAG,CAACH,IAAJ,EAAxB,CAAb;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAYE,IAAZ;AACA,YAAMI,aAAa,GAAGJ,IAAI,CAACK,MAAL,CAAaC,MAAD,IAAYA,MAAM,CAACrB,EAAP,IAAac,GAArC,CAAtB;AACAH,MAAAA,aAAa,CAACQ,aAAD,CAAb;AACAP,MAAAA,OAAO,CAACC,GAAR,CAAYM,aAAZ;AACD,KARa,CASd;AACA;AACA;AACA;AACA;AACA;AACA;;AACD,GAhBQ,EAgBN,CAAChB,KAAD,CAhBM,CAAT;AAkBA,QAAMmB,kBAAkB,GAAG,IAA3B;;AAEA,QAAMC,cAAc,GAAG,CAACC,eAAD,EAAkBC,UAAlB,KAAiC;AACtD,WAAOD,eAAe,CAACE,KAAhB,CAAsBD,UAAtB,EAAkCR,GAAlC,CAAsC,CAACU,SAAD,EAAYC,KAAZ,KAC3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAID,SAAJ,CAD2C,CAE3C;AAFK,KAAP;AAID,GALD,CArCmB,CA4CnB;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;;;AAEA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIE,IAAI,CAACC,SAAL,CAAepB,UAAf,CAAJ,MAAP;AACD,CA5DD;;AA6DAZ,MAAM,CAACiC,SAAP,GAAmB,CACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAViB,CAAnB,C,CAaA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAejC,MAAf","sourcesContent":["import { useContext, useState, useEffect } from \"react\";\nimport \"firebase/firestore\";\nimport \"firebase/functions\";\nimport PropTypes from \"prop-types\";\n\nimport { useRouter } from \"next/router\";\nimport Link from \"next/link\";\nimport { useDocument, useCollection } from \"react-firebase-hooks/firestore\";\nimport { FirebaseContext } from \"../../services/firebase.js\";\n\n// import ReactMarkdown from \"react-markdown\";\n\nimport { Grid, Row, Col } from \"react-flexbox-grid/dist/react-flexbox-grid\";\n\nimport { ChevronLeft, Disc } from \"react-feather\";\n\n// import EmailForm from \"Components/EmailForm\";\n// // import ImagesCarousel from \"Components/ImagesCarousel\";\nimport \"./index.module.scss\";\n\nconst Studio = () => {\n  const router = useRouter();\n  const { id } = router.query;\n\n  const firebase = useContext(FirebaseContext);\n\n  const [value, loading, error] = useCollection(\n    firebase.firestore().collection(\"studios\"),\n    {\n      snapshotListenOptions: { includeMetadataChanges: true },\n    }\n  );\n  //   const sayHello = firebase.functions().httpsCallable(\"sayHelloFunc\");\n  //   const getProducts = firebase.functions().httpsCallable(\"getProductsCF\");\n\n  const [studioData, setStudioData] = useState({});\n\n  useEffect(() => {\n    if (value) {\n      console.log(pid);\n      const data = value.docs.map((doc) => doc.data());\n      console.log(data);\n      const theStudioData = data.filter((studio) => studio.id == pid);\n      setStudioData(theStudioData);\n      console.log(theStudioData);\n    }\n    // sayHello({ name: \"Shaun\" }).then((result) => {\n    //   console.log(result.data);\n    // });\n    // getProducts({}).then((result) => {\n    //   console.log(result.data);\n    //   setResultfromCF(result.data);\n    // });\n  }, [value]);\n\n  const paragraphSeperator = \"\\\\\";\n\n  const makeParagraphs = (paragraphString, pSeparator) => {\n    return paragraphString.split(pSeparator).map((paragraph, index) => (\n      <p>{paragraph}</p>\n      // <ReactMarkdown key={index}>{paragraph}</ReactMarkdown>\n    ));\n  };\n\n  // const makeImagesArray = () => {\n  //   const imgUrls =\n  //     images !== undefined &&\n  //     images.split(\",\").map((imgId) => \"/img/\" + artist + \"/\" + imgId + \".jpg\");\n\n  //   const imgTexts = imagesText !== undefined && imagesText.split(\";\");\n\n  //   const imgs = imgUrls.reduce((acc, current, index) => {\n  //     acc.push({ url: imgUrls[index], caption: imgTexts[index] || \"\" });\n  //     return acc;\n  //   }, []);\n\n  //   return imgs;\n  // };\n\n  return <p>{JSON.stringify(studioData)},</p>;\n};\nStudio.propTypes = {\n  //   article: PropTypes.shape({\n  //     id: PropTypes.string.isRequired,\n  //     dates: PropTypes.string.isRequired,\n  //     styles: PropTypes.string.isRequired,\n  //     city: PropTypes.string.isRequired,\n  //     rules: PropTypes.string.isRequired,\n  //     artistText: PropTypes.string.isRequired,\n  //     studioText: PropTypes.string.isRequired,\n  //   }).isRequired,\n  //   closeArticle: PropTypes.func.isRequired,\n};\n\n// export const getServerSideProps = async ({ query }) => {\n//   const content = {}\n\n//   const [value, loading, error] = useDocument(\n//     firebase.firestore().doc('hooks/nBShXiRGFAhuiPfBaGpt'),\n//     {\n//       snapshotListenOptions: { includeMetadataChanges: true },\n//     }\n//   );\n\n//   await fire.firestore()\n//     .collection('blog')\n//     .doc(query.id)\n//     .get()\n//     .then(result => {\n//       content['title'] = result.data().title;\n//       content['content'] = result.data().content;\n//     });\n// return {\n//     props: {\n//       title: content.title,\n//       content: content.content,\n//     }\n//   }\n// }\n\nexport default Studio;\n"]},"metadata":{},"sourceType":"module"}