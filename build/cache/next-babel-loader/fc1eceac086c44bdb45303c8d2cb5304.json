{"ast":null,"code":"var _jsxFileName = \"/home/you/Code/github/kksso/services/studios.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { createContext, useState } from \"react\";\nimport { supabase } from \"./supabase\";\nconst StudiosContext = /*#__PURE__*/createContext(null);\nconst emptyQuery = {\n  city: \"\",\n  mediums: \"\"\n};\n\nconst StudiosProvider = ({\n  children\n}) => {\n  const {\n    0: studios,\n    1: setStudios\n  } = useState([]);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const {\n    0: error,\n    1: setError\n  } = useState();\n  const {\n    0: query,\n    1: setQuery\n  } = useState(emptyQuery);\n\n  const updateStudios = newStudios => {\n    setStudios(newStudios);\n  };\n\n  const updateQuery = newQuery => {\n    setQuery(newQuery);\n  };\n\n  const fetchStudios = async () => {\n    let {\n      data: supaStudios,\n      error\n    } = await supabase.from(\"studios\").select(\"*\").order(\"id\", true);\n    if (error) setError(error);else {\n      setStudios(supaStudios); // console.log(supaStudios);\n\n      setLoading(false);\n    }\n  };\n  /* {\n  const fetchStudio = async () => {\n    // TO DO: grab from local store\n    let { data: oneStudio, error } = await supabase\n      .from(\"studios\")\n      .select(\"*\")\n      .match({ id })\n      .single();\n    if (error) setError(error);\n    else {\n      setStudio(oneStudio);\n      setImages(\n        prepImagesforCarousel(oneStudio.imagesFiles, oneStudio.imagesCaptions)\n      );\n      setLoading(false);\n    }\n  };\n  } */\n\n\n  const contextObj = {\n    studios,\n    query,\n    updateStudios,\n    updateQuery,\n    fetchStudios,\n    loading,\n    error\n  };\n  return __jsx(StudiosContext.Provider, {\n    value: contextObj,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nexport { StudiosContext, StudiosProvider };","map":{"version":3,"sources":["/home/you/Code/github/kksso/services/studios.js"],"names":["createContext","useState","supabase","StudiosContext","emptyQuery","city","mediums","StudiosProvider","children","studios","setStudios","loading","setLoading","error","setError","query","setQuery","updateStudios","newStudios","updateQuery","newQuery","fetchStudios","data","supaStudios","from","select","order","contextObj"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,SAASC,QAAT,QAAyB,YAAzB;AAEA,MAAMC,cAAc,gBAAGH,aAAa,CAAC,IAAD,CAApC;AAEA,MAAMI,UAAU,GAAG;AAAEC,EAAAA,IAAI,EAAE,EAAR;AAAYC,EAAAA,OAAO,EAAE;AAArB,CAAnB;;AAEA,MAAMC,eAAe,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACxC,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwBT,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM;AAAA,OAACU,OAAD;AAAA,OAAUC;AAAV,MAAwBX,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM;AAAA,OAACY,KAAD;AAAA,OAAQC;AAAR,MAAoBb,QAAQ,EAAlC;AACA,QAAM;AAAA,OAACc,KAAD;AAAA,OAAQC;AAAR,MAAoBf,QAAQ,CAACG,UAAD,CAAlC;;AAEA,QAAMa,aAAa,GAAIC,UAAD,IAAgB;AACpCR,IAAAA,UAAU,CAACQ,UAAD,CAAV;AACD,GAFD;;AAIA,QAAMC,WAAW,GAAIC,QAAD,IAAc;AAChCJ,IAAAA,QAAQ,CAACI,QAAD,CAAR;AACD,GAFD;;AAIA,QAAMC,YAAY,GAAG,YAAY;AAC/B,QAAI;AAAEC,MAAAA,IAAI,EAAEC,WAAR;AAAqBV,MAAAA;AAArB,QAA+B,MAAMX,QAAQ,CAC9CsB,IADsC,CACjC,SADiC,EAEtCC,MAFsC,CAE/B,GAF+B,EAGtCC,KAHsC,CAGhC,IAHgC,EAG1B,IAH0B,CAAzC;AAIA,QAAIb,KAAJ,EAAWC,QAAQ,CAACD,KAAD,CAAR,CAAX,KACK;AACHH,MAAAA,UAAU,CAACa,WAAD,CAAV,CADG,CAEH;;AACAX,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,GAXD;AAaA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEE,QAAMe,UAAU,GAAG;AACjBlB,IAAAA,OADiB;AAEjBM,IAAAA,KAFiB;AAGjBE,IAAAA,aAHiB;AAIjBE,IAAAA,WAJiB;AAKjBE,IAAAA,YALiB;AAMjBV,IAAAA,OANiB;AAOjBE,IAAAA;AAPiB,GAAnB;AAUA,SACE,MAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAEc,UAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGnB,QADH,CADF;AAKD,CA7DD;;AA+DA,SAASL,cAAT,EAAyBI,eAAzB","sourcesContent":["import { createContext, useState } from \"react\";\nimport { supabase } from \"./supabase\";\n\nconst StudiosContext = createContext(null);\n\nconst emptyQuery = { city: \"\", mediums: \"\" };\n\nconst StudiosProvider = ({ children }) => {\n  const [studios, setStudios] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState();\n  const [query, setQuery] = useState(emptyQuery);\n\n  const updateStudios = (newStudios) => {\n    setStudios(newStudios);\n  };\n\n  const updateQuery = (newQuery) => {\n    setQuery(newQuery);\n  };\n\n  const fetchStudios = async () => {\n    let { data: supaStudios, error } = await supabase\n      .from(\"studios\")\n      .select(\"*\")\n      .order(\"id\", true);\n    if (error) setError(error);\n    else {\n      setStudios(supaStudios);\n      // console.log(supaStudios);\n      setLoading(false);\n    }\n  };\n\n  /* {\n  const fetchStudio = async () => {\n    // TO DO: grab from local store\n    let { data: oneStudio, error } = await supabase\n      .from(\"studios\")\n      .select(\"*\")\n      .match({ id })\n      .single();\n    if (error) setError(error);\n    else {\n      setStudio(oneStudio);\n      setImages(\n        prepImagesforCarousel(oneStudio.imagesFiles, oneStudio.imagesCaptions)\n      );\n      setLoading(false);\n    }\n  };\n  } */\n\n  const contextObj = {\n    studios,\n    query,\n    updateStudios,\n    updateQuery,\n    fetchStudios,\n    loading,\n    error,\n  };\n\n  return (\n    <StudiosContext.Provider value={contextObj}>\n      {children}\n    </StudiosContext.Provider>\n  );\n};\n\nexport { StudiosContext, StudiosProvider };\n"]},"metadata":{},"sourceType":"module"}