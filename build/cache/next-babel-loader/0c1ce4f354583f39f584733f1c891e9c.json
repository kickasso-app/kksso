{"ast":null,"code":"var _jsxFileName = \"/home/you/Code/github/kksso/components/SearchBar/index.js\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useMemo, useRef, useState, useContext } from \"react\";\nimport { StudiosContext } from \"../../services/studios\";\nimport { useRouter } from \"next/router\";\nimport { Grid, Row, Col } from \"react-flexbox-grid/dist/react-flexbox-grid\";\nimport { Hash, Disc, Search, X } from \"react-feather\";\nimport { Box, Text, TextInput } from \"grommet\";\nimport { cities, mediums } from \"../../config/filters\";\nexport const SearchBar = ({\n  isActive = true\n}) => {\n  const {\n    query: {\n      city: queryCity,\n      mediums: queryMedium\n    },\n    updateQuery\n  } = useContext(StudiosContext);\n  const router = useRouter();\n  const {\n    0: isSearchBarActive,\n    1: setIsSearchBarActive\n  } = useState(isActive);\n  const {\n    0: suggestionOpen,\n    1: setSuggestionOpen\n  } = useState(false);\n  const {\n    0: suggestionsType,\n    1: setSuggestionsType\n  } = useState(\"cities\");\n  const {\n    0: city,\n    1: setCity\n  } = useState(queryCity);\n  const {\n    0: medium,\n    1: setMedium\n  } = useState(queryMedium); //   const [times, setTimes] = useState(visitTimes[0]);\n\n  const {\n    0: suggestedCities,\n    1: setSuggestedCities\n  } = useState(cities);\n  const {\n    0: suggestedMediums,\n    1: setSuggestedMediums\n  } = useState(mediums);\n  const boxRef = useRef();\n  const onChangeMedium = useCallback(event => {\n    const {\n      value: query\n    } = event.target;\n    setMedium(query);\n\n    if (!query.trim()) {\n      setSuggestedMediums(mediums);\n    } else {\n      // simulate an async call to the backend\n      setTimeout(() => setSuggestedMediums(mediums.filter(medium => medium.toLowerCase().indexOf(query.toLowerCase()) >= 0)), 300);\n    }\n  }, []);\n  const onChangeCity = useCallback(event => {\n    const {\n      value: query\n    } = event.target;\n    setCity(query);\n\n    if (!query.trim()) {\n      setSuggestedCities(cities);\n    } else {\n      // simulate an async call to the backend\n      setTimeout(() => setSuggestedCities(cities.filter(city => city.toLowerCase().indexOf(query.toLowerCase()) >= 0)), 300);\n    }\n  }, []);\n  const renderCities = useMemo(() => suggestedCities.map(city => __jsx(Col, {\n    md: 2,\n    align: \"start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, __jsx(Text, {\n    color: \"#4b4b4b\",\n    onClick: () => setCity(city),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  }, __jsx(Disc, {\n    size: 20,\n    strokeWidth: \"1.5\",\n    color: \"#4b4b4b\",\n    fill: \"#fff\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }), \"  \", city))), [suggestedCities]);\n  const renderMediums = useMemo(() => suggestedMediums.map(suggestedMedium => __jsx(Col, {\n    md: 2,\n    align: \"start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, __jsx(Text, {\n    onClick: () => {\n      // TO DO: add more tan one medium\n      // if (!medium.includes(suggestedMedium)) {\n      //   setMedium(medium + \" \" + suggestedMedium);\n      // }\n      setMedium(suggestedMedium);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }, __jsx(Hash, {\n    size: 18,\n    strokeWidth: \"1\",\n    color: \"#4b4b4b\",\n    fill: \"#fff\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }), \"  \", suggestedMedium))), [suggestedMediums]);\n\n  const renderSearchInput = ({\n    boxRef,\n    title,\n    placeholder,\n    searchType,\n    value,\n    onChange\n  }) => {\n    return __jsx(Box, {\n      ref: boxRef,\n      align: \"start\",\n      onFocus: () => setSuggestionsType(searchType),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 7\n      }\n    }, title && __jsx(Text, {\n      margin: {\n        left: \"small\",\n        top: \"xsmall\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }\n    }, title), __jsx(TextInput, {\n      placeholder: placeholder,\n      plain: true,\n      value: value,\n      onChange: onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  return __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 5\n    }\n  }, __jsx(Box, {\n    width: isSearchBarActive ? \"xlarge\" : \"large\",\n    pad: \"small\",\n    border: {\n      color: \"#222222\",\n      size: \"xsmall\",\n      style: \"solid\",\n      side: \"all\"\n    },\n    round: \"large\",\n    onFocus: () => {\n      setIsSearchBarActive(true);\n      setSuggestionOpen(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }\n  }, __jsx(Grid, {\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }\n  }, __jsx(Row, {\n    between: \"xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 11\n    }\n  }, __jsx(Col, {\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }\n  }, renderSearchInput({\n    // boxRef: boxRef,\n    title: \"Location\",\n    placeholder: \"Where to visit?\",\n    searchType: \"cities\",\n    value: city,\n    onChange: onChangeCity\n  })), __jsx(Col, {\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }\n  }, renderSearchInput({\n    // boxRef: boxRef,\n    title: \"Medium\",\n    placeholder: \"Which styles to explore?\",\n    searchType: \"mediums\",\n    value: medium,\n    onChange: onChangeMedium\n  })), __jsx(Col, {\n    md: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 13\n    }\n  }, __jsx(Row, {\n    end: \"xs\",\n    onClick: () => {\n      updateQuery({\n        city: city,\n        mediums: medium\n      });\n      setSuggestionOpen(false);\n\n      if (!router.pathname.includes(\"studios\")) {\n        router.push(\"/studios\");\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 15\n    }\n  }, __jsx(Box, {\n    width: \"48px\",\n    align: \"center\",\n    pad: \"small\",\n    background: \"#FFC0CB\",\n    round: \"medium\",\n    margin: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 17\n    }\n  }, __jsx(Search, {\n    size: 24,\n    color: \"#222222\",\n    strokeWidth: 1.5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 19\n    }\n  }))))))), suggestionOpen && __jsx(Box, {\n    width: \"xlarge\",\n    margin: {\n      vertical: \"small\"\n    },\n    pad: {\n      vertical: \"medium\",\n      horizontal: \"large\"\n    },\n    border: {\n      color: \"#FFC0CB\",\n      size: \"small\",\n      style: \"solid\",\n      side: \"all\"\n    },\n    round: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 9\n    }\n  }, __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 11\n    }\n  }, suggestionsType === \"cities\" && __jsx(React.Fragment, null, renderCities), suggestionsType === \"mediums\" && __jsx(React.Fragment, null, renderMediums))));\n};\nexport default SearchBar;","map":{"version":3,"sources":["/home/you/Code/github/kksso/components/SearchBar/index.js"],"names":["React","useCallback","useMemo","useRef","useState","useContext","StudiosContext","useRouter","Grid","Row","Col","Hash","Disc","Search","X","Box","Text","TextInput","cities","mediums","SearchBar","isActive","query","city","queryCity","queryMedium","updateQuery","router","isSearchBarActive","setIsSearchBarActive","suggestionOpen","setSuggestionOpen","suggestionsType","setSuggestionsType","setCity","medium","setMedium","suggestedCities","setSuggestedCities","suggestedMediums","setSuggestedMediums","boxRef","onChangeMedium","event","value","target","trim","setTimeout","filter","toLowerCase","indexOf","onChangeCity","renderCities","map","renderMediums","suggestedMedium","renderSearchInput","title","placeholder","searchType","onChange","left","top","color","size","style","side","pathname","includes","push","vertical","horizontal"],"mappings":"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","sourcesContent":["import React, {\n  useCallback,\n  useMemo,\n  useRef,\n  useState,\n  useContext,\n} from \"react\";\nimport { StudiosContext } from \"../../services/studios\";\nimport { useRouter } from \"next/router\";\n\nimport { Grid, Row, Col } from \"react-flexbox-grid/dist/react-flexbox-grid\";\n\nimport { Hash, Disc, Search, X } from \"react-feather\";\nimport { Box, Text, TextInput } from \"grommet\";\n\nimport { cities, mediums } from \"../../config/filters\";\n\nexport const SearchBar = ({ isActive = true }) => {\n  const {\n    query: { city: queryCity, mediums: queryMedium },\n    updateQuery,\n  } = useContext(StudiosContext);\n\n  const router = useRouter();\n\n  const [isSearchBarActive, setIsSearchBarActive] = useState(isActive);\n  const [suggestionOpen, setSuggestionOpen] = useState(false);\n  const [suggestionsType, setSuggestionsType] = useState(\"cities\");\n\n  const [city, setCity] = useState(queryCity);\n  const [medium, setMedium] = useState(queryMedium);\n  //   const [times, setTimes] = useState(visitTimes[0]);\n\n  const [suggestedCities, setSuggestedCities] = useState(cities);\n  const [suggestedMediums, setSuggestedMediums] = useState(mediums);\n\n  const boxRef = useRef();\n\n  const onChangeMedium = useCallback((event) => {\n    const { value: query } = event.target;\n    setMedium(query);\n    if (!query.trim()) {\n      setSuggestedMediums(mediums);\n    } else {\n      // simulate an async call to the backend\n      setTimeout(\n        () =>\n          setSuggestedMediums(\n            mediums.filter(\n              (medium) => medium.toLowerCase().indexOf(query.toLowerCase()) >= 0\n            )\n          ),\n        300\n      );\n    }\n  }, []);\n\n  const onChangeCity = useCallback((event) => {\n    const { value: query } = event.target;\n    setCity(query);\n\n    if (!query.trim()) {\n      setSuggestedCities(cities);\n    } else {\n      // simulate an async call to the backend\n      setTimeout(\n        () =>\n          setSuggestedCities(\n            cities.filter(\n              (city) => city.toLowerCase().indexOf(query.toLowerCase()) >= 0\n            )\n          ),\n        300\n      );\n    }\n  }, []);\n\n  const renderCities = useMemo(\n    () =>\n      suggestedCities.map((city) => (\n        <Col md={2} align=\"start\">\n          <Text color=\"#4b4b4b\" onClick={() => setCity(city)}>\n            <Disc size={20} strokeWidth=\"1.5\" color=\"#4b4b4b\" fill=\"#fff\" />\n            {\"  \"}\n            {city}\n          </Text>\n        </Col>\n      )),\n    [suggestedCities]\n  );\n\n  const renderMediums = useMemo(\n    () =>\n      suggestedMediums.map((suggestedMedium) => (\n        <Col md={2} align=\"start\">\n          <Text\n            onClick={() => {\n              // TO DO: add more tan one medium\n              // if (!medium.includes(suggestedMedium)) {\n              //   setMedium(medium + \" \" + suggestedMedium);\n              // }\n              setMedium(suggestedMedium);\n            }}\n          >\n            <Hash size={18} strokeWidth=\"1\" color=\"#4b4b4b\" fill=\"#fff\" />\n            {\"  \"}\n            {suggestedMedium}\n          </Text>\n        </Col>\n      )),\n    [suggestedMediums]\n  );\n\n  const renderSearchInput = ({\n    boxRef,\n    title,\n    placeholder,\n    searchType,\n    value,\n    onChange,\n  }) => {\n    return (\n      <Box\n        ref={boxRef}\n        align=\"start\"\n        onFocus={() => setSuggestionsType(searchType)}\n      >\n        {title && (\n          <Text margin={{ left: \"small\", top: \"xsmall\" }}>{title}</Text>\n        )}\n        <TextInput\n          placeholder={placeholder}\n          plain\n          value={value}\n          onChange={onChange}\n        />\n      </Box>\n    );\n  };\n\n  return (\n    <Box>\n      <Box\n        width={isSearchBarActive ? \"xlarge\" : \"large\"}\n        pad=\"small\"\n        border={{\n          color: \"#222222\",\n          size: \"xsmall\",\n          style: \"solid\",\n          side: \"all\",\n        }}\n        round=\"large\"\n        onFocus={() => {\n          setIsSearchBarActive(true);\n          setSuggestionOpen(true);\n        }}\n      >\n        <Grid fluid>\n          <Row between=\"xs\">\n            <Col md={3}>\n              {renderSearchInput({\n                // boxRef: boxRef,\n                title: \"Location\",\n                placeholder: \"Where to visit?\",\n                searchType: \"cities\",\n                value: city,\n                onChange: onChangeCity,\n              })}\n            </Col>\n            <Col md={3}>\n              {renderSearchInput({\n                // boxRef: boxRef,\n                title: \"Medium\",\n                placeholder: \"Which styles to explore?\",\n                searchType: \"mediums\",\n                value: medium,\n                onChange: onChangeMedium,\n              })}\n            </Col>\n            {/* <Col md={3}>\n              {searchPart({\n                // boxRef: boxRef,\n                title: \"Time\",\n                placeholder: \"Whhen to visit?\",\n                value: times,\n                onChange: onChangeTimes,\n              })}\n            </Col> */}\n            <Col md={2}>\n              <Row\n                end=\"xs\"\n                onClick={() => {\n                  updateQuery({ city: city, mediums: medium });\n                  setSuggestionOpen(false);\n                  if (!router.pathname.includes(\"studios\")) {\n                    router.push(\"/studios\");\n                  }\n                }}\n              >\n                <Box\n                  width=\"48px\"\n                  align=\"center\"\n                  pad=\"small\"\n                  background=\"#FFC0CB\"\n                  round=\"medium\"\n                  margin=\"small\"\n                >\n                  <Search size={24} color=\"#222222\" strokeWidth={1.5} />\n\n                  {/* \n                  {value.length === 0 ? (\n                    <Search size={24} color=\"#222222\" strokeWidth={1.5} />\n                  ) : (\n                    <X\n                      onClick={() => {\n                        setValue(\"\");\n                      }}\n                    />\n                  )} */}\n                </Box>\n              </Row>\n            </Col>\n          </Row>\n        </Grid>\n      </Box>\n      {suggestionOpen && (\n        <Box\n          width=\"xlarge\"\n          margin={{ vertical: \"small\" }}\n          pad={{ vertical: \"medium\", horizontal: \"large\" }}\n          border={{\n            color: \"#FFC0CB\",\n            size: \"small\",\n            style: \"solid\",\n            side: \"all\",\n          }}\n          round=\"large\"\n        >\n          <Row>\n            {suggestionsType === \"cities\" && <>{renderCities}</>}\n            {suggestionsType === \"mediums\" && <>{renderMediums}</>}\n            {/* {suggestionsType === \"times\" && <>{suggestionsTimes}</>} */}\n          </Row>\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default SearchBar;\n"]},"metadata":{},"sourceType":"module"}